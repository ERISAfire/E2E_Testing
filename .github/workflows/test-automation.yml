name: Test Automation Framework CI/CD

on:
  workflow_dispatch:
    inputs:
      testTags:
        description: 'Tags to run (e.g. @smoke, @regression, @api, @ui, @auth)'
        required: true
        default: '@smoke'
        type: string
      branch:
        description: 'Branch to run tests from'
        required: true
        default: 'main'
        type: string

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file
        run: |
          cat > .env << EOF
          BASE_URL=${{ secrets.BASE_URL }}
          API_BASE_URL=${{ secrets.API_BASE_URL }}
          USER_EMAIL=${{ secrets.USER_EMAIL }}
          USER_PASSWORD=${{ secrets.USER_PASSWORD }}
          API_BEARER_TOKEN=${{ secrets.API_BEARER_TOKEN }}
          EOF

      - name: Build project
        run: |
          npm install
          npm run build

      - name: Run API tests
        if: contains(github.event.inputs.testTags, '@api') || github.event.inputs.testTags == '@regression' || github.event.inputs.testTags == '@smoke' || github.event.inputs.testTags == '@coverageType' || github.event.inputs.testTags == '@auth' || github.event.inputs.testTags == '@coverageAttribute' || github.event.inputs.testTags == '@projectTemplate'
        run: |
          if [[ "${{ github.event.inputs.testTags }}" == "@api" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@api" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@regression" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@regression.*@api" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@smoke" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@smoke.*@api" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@coverageType" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@coverageType.*@api" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@auth" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@auth.*@api" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@coverageAttribute" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@coverageAttribute.*@api" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@projectTemplate" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@projectTemplate.*@api" --reporter=list,allure-playwright
          fi
        env:
          NODE_OPTIONS: '--experimental-modules --es-module-specifier-resolution=node --loader ts-node/esm'
          PLAYWRIGHT_TEST_TIMEOUT: '120000'
          TS_NODE_PROJECT: './tsconfig.json'

      - name: Run UI tests
        if: contains(github.event.inputs.testTags, '@ui') || github.event.inputs.testTags == '@regression' || github.event.inputs.testTags == '@smoke' || github.event.inputs.testTags == '@coverageType' || github.event.inputs.testTags == '@auth' || github.event.inputs.testTags == '@coverageAttribute' || github.event.inputs.testTags == '@projectTemplate' || (!contains(github.event.inputs.testTags, '@api') && !contains(github.event.inputs.testTags, '@ui'))
        run: |
          if [[ "${{ github.event.inputs.testTags }}" == "@ui" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@ui" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@regression" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@regression.*@ui" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@smoke" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@smoke.*@ui" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@coverageType" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@coverageType.*@ui" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@auth" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@auth.*@ui" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@coverageAttribute" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@coverageAttribute.*@ui" --reporter=list,allure-playwright
          elif [[ "${{ github.event.inputs.testTags }}" == "@projectTemplate" ]]; then
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "@projectTemplate.*@ui" --reporter=list,allure-playwright
          else
            NODE_OPTIONS='--loader ts-node/esm' npx playwright test --workers=2 --grep "${{ github.event.inputs.testTags }}" --reporter=list,allure-playwright
          fi
        env:
          NODE_OPTIONS: '--experimental-modules --es-module-specifier-resolution=node --loader ts-node/esm'
          PLAYWRIGHT_TEST_TIMEOUT: '120000'
          TS_NODE_PROJECT: './tsconfig.json'

      - name: Generate Allure Static Report
        if: always()
        run: |
          npm install -g allure-commandline
          # Create a directory for the report
          mkdir -p allure-report/static
          # Generate the single HTML file
          allure generate allure-results --clean -o allure-report/static --single-file
          # Create a directory for the artifact
          mkdir -p allure-static-report
          # Copy only the single HTML file
          cp allure-report/static/index.html allure-static-report/

      - name: Upload Allure Static Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: allure-static-report/
          retention-days: 30
